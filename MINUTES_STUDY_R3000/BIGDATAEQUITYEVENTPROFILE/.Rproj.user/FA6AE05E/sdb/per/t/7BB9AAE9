{
    "contents" : "library(shiny)\nlibrary(shinyjs)\n\nlibrary(DT)\nlibrary(\"RPPlotUtils\")\nlibrary(\"RPToolsDB\")\n\nlibrary(\"png\")\n\nuser = 'sduprey'\n# JIRA Code (e.g. NAR-#)\nJIRACode = 'NAR-326'\nrepoPath = RP_GetSharedPath(user)\n# Input Data Path\ninputDataPath  = paste(repoPath,'InputData/', user,'/',JIRACode,'/',sep=\"\")\n# Output Data Path\noutputDataPath = paste(repoPath,'OutputData/', user,'/',JIRACode,'/',sep=\"\")\n\ndataTotr1000 <- readRDS(file=paste0(outputDataPath,\"spr_r1000_bigdata_abvol_abvol_corrado_df.rds\"))\nbest_profile_group_ordered_r1000_corrado_df <- readRDS(file=paste0(outputDataPath,\"bigdata_best_profile_group_ordered_r1000_corrado_df.rds\"))\nbest_profile_category_ordered_r1000_corrado_df <- readRDS(file=paste0(outputDataPath,\"bigdata_best_profile_category_ordered_r1000_corrado_df.rds\"))\n\n# dataTotr2000 <- readRDS(file=paste0(outputDataPath,\"spr_r2000_bigdata_abvol_abvol_corrado_df.rds\"))\n# best_profile_group_ordered_r2000_corrado_df <- readRDS(file=paste0(outputDataPath,\"bigdata_best_profile_group_ordered_r2000_corrado_df.rds\"))\n# best_profile_category_ordered_r2000_corrado_df <- readRDS(file=paste0(outputDataPath,\"bigdata_best_profile_category_ordered_r2000_corrado_df.rds\"))\ndataTotr2000 <- dataTotr1000\nbest_profile_group_ordered_r2000_corrado_df <- best_profile_group_ordered_r1000_corrado_df\nbest_profile_category_ordered_r2000_corrado_df <- best_profile_category_ordered_r1000_corrado_df\n\n\nall_group_events <- readRDS(file=paste0(outputDataPath,\"bigdata_all_group_events.rds\"))\nall_category_events <- readRDS(file=paste0(outputDataPath,\"bigdata_all_category_events.rds\"))\n\n\ndataTotr1000$correcting_factor <- 2*(dataTotr1000$sentiment_criteria == \"POSITIVE\"  | dataTotr1000$sentiment_criteria == \"SPREAD\" )-1\ndataTotr1000$correcting_factor[dataTotr1000$sentiment_criteria == \"ALL\"] <- 0\nstats_post_sign <- colnames(dataTotr1000)[which(as.numeric(colnames(dataTotr1000)) >= 0)]\nrets_post <- paste0(\"RET\",stats_post_sign)\ndataTotr1000$infinity_return <- rowSums(dataTotr1000[,rets_post]*dataTotr1000$correcting_factor*dataTotr1000[,stats_post_sign],na.rm = TRUE)\ndataTotr1000 <- dataTotr1000[dataTotr1000$event_number_event_filtering >= 50,]\n\ndataTotr2000$correcting_factor <- 2*(dataTotr2000$sentiment_criteria == \"POSITIVE\"  | dataTotr2000$sentiment_criteria == \"SPREAD\" )-1\ndataTotr2000$correcting_factor[dataTotr2000$sentiment_criteria == \"ALL\"] <- 0\nstats_post_sign <- colnames(dataTotr2000)[which(as.numeric(colnames(dataTotr2000)) >= 0)]\nrets_post <- paste0(\"RET\",stats_post_sign)\ndataTotr2000$infinity_return <- rowSums(dataTotr2000[,rets_post]*dataTotr2000$correcting_factor*dataTotr2000[,stats_post_sign],na.rm = TRUE)\ndataTotr2000 <- dataTotr2000[dataTotr2000$event_number_event_filtering >= 50,]\n\nPlotDataFrame <- function (DataFrame, XLab = \"\", YLab = \"\", Title = \"\", AxisIncluded = FALSE, \n                           byRows = FALSE, spread = FALSE, pointOnly = FALSE, lineOnly = TRUE, percent=FALSE,\n                           FullExportingPath = NULL) \n{\n  if (byRows) \n    DataFrame = t(DataFrame)\n  if (is.null(colnames(DataFrame))) \n    colnames(DataFrame) <- paste0(\"COLUMN_\", seq(1, dim(DataFrame)[2]))\n  if (class(DataFrame) == \"matrix\") \n    DataFrame <- as.data.frame(DataFrame)\n  if (AxisIncluded) {\n    my_column_to_plot_against <- colnames(DataFrame)[1]\n  }\n  else {\n    my_column_to_plot_against <- \"TO_PLOT_AGAINST\"\n    DataFrame$TO_PLOT_AGAINST <- as.numeric(seq(1, dim(DataFrame)[1]))\n  }\n  ToPlotDataFrame <- melt(DataFrame, my_column_to_plot_against)\n  g <- ggplot(ToPlotDataFrame, aes(x = ToPlotDataFrame[, c(my_column_to_plot_against)], \n                                   y = value, group = variable, color = variable, fill = variable))\n  if (pointOnly) {\n    g <- g + geom_point()\n  }\n  else if (lineOnly) {\n    g <- g + geom_line()\n  }\n  else {\n    g <- g + geom_line() + geom_point()\n  }\n  g <- g + xlab(XLab) + ylab(YLab) + ggtitle(Title) + theme(title = element_text(size = 16, \n                                                                                 face = \"bold\")) + theme(axis.text.x = element_text(size = 14)) + \n    theme(legend.position = c(0.9, 0.9), legend.box = \"vertical\", \n          legend.text = element_text(size = 16)) + theme(legend.position = \"bottom\", \n                                                         legend.title = element_blank())+theme(axis.text=element_text(size=14),\n                                                                                               axis.title=element_text(size=16,face=\"bold\"))\n  if (spread) \n    g <- g + facet_wrap(~variable)\n  \n  if (percent){\n    g <- g +   scale_y_continuous(labels = percent_format(),limits = c(-0, 1)) \n  }\n  \n  if (\"DATE\" == my_column_to_plot_against) \n    g <- g + scale_x_date()\n  if (!is.null(FullExportingPath)) \n    RP_ExportPlot(g, FullExportingPath, \"\")\n  return(g)\n}\n\noutputGraphicsTogetherBestProfileStats <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n  dataframestats <- dataFrame[,c(\"MINUTES\",\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\")]\n  colnames(dataframestats) <- c(\"MINUTES\",\"SIGNIFICANCE(RANK)\",\"SIGNIFICANCE\")\n  \n  \n  \n  significance_threshold <- 1 - 0.05\n  dataframestats$ABNORMAL_THRESHOLD <- significance_threshold\n  \n  dataframestats[is.na(dataframestats)] <- 0\n  \n  g1 <- PlotDataFrame(dataframestats,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"p-value\",percent= TRUE, Title = paste0(my_event,\" statistical significance\"), FullExportingPath = NULL)\n  # g2 <- RP_PlotDataFrame(dataframerets,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"BPS cumulated minute returns\",Title = my_event, FullExportingPath = NULL)\n  # g <- RP_ExportMultiplePlot(g1,g2, plotlist = NULL, filename = NULL, outputDataPath = NULL, cols = 1, width = 10, height = 15)\n  return(g1)\n}\n\noutputGraphicsTogetherBestProfileRets <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n  \n  dataframerets <- dataFrame[,c(\"MINUTES\",\"RETS\")]\n  colnames(dataframerets) <- c(\"MINUTES\",\"RETURNS\")\n  \n  \n  # g1 <- RP_PlotDataFrame(dataframestats,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"p-value\",Title = my_event, FullExportingPath = NULL)\n  g2 <- PlotDataFrame(dataframerets,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"BPS cumulated minute returns\",Title = paste0(my_event,\" returns\"), FullExportingPath = NULL)\n  # g <- RP_ExportMultiplePlot(g1,g2, plotlist = NULL, filename = NULL, outputDataPath = NULL, cols = 1, width = 10, height = 15)\n  \n  return(g2)\n  \n}\n\noutputGraphicsTogetherBestProfileVol <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n  \n  dataframevol<- dataFrame[,c(\"MINUTES\",\"VOLUME\")]\n\n  \n  # g1 <- RP_PlotDataFrame(dataframestats,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"p-value\",Title = my_event, FullExportingPath = NULL)\n  g2 <- PlotDataFrame(dataframevol,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"Volume in billion dollars \",Title = paste0(my_event,\" trading volume\"), FullExportingPath = NULL)\n  # g <- RP_ExportMultiplePlot(g1,g2, plotlist = NULL, filename = NULL, outputDataPath = NULL, cols = 1, width = 10, height = 15)\n  \n  return(g2)\n  \n}\n\noutputGraphicsTogetherBestProfileVola <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n  print(colnames(dataFrame))\n  dataframervola <- dataFrame[,c(\"MINUTES\",\"VOLATILITY\")]\n  \n  \n  g2 <- PlotDataFrame(dataframervola,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"Abnormal volatility ratio\",Title = paste0(my_event,\" abnormal volatility\"), FullExportingPath = NULL)\n\n  return(g2)\n  \n}\n\nfunction(input, output, session) {\n  \n  observeEvent(input$sentiment_criteria, {\n    if(input$sentiment_criteria == \"BEST\"){\n      shinyjs::disable(\"similarity_gap_filter\")\n      shinyjs::disable(\"relevance\")\n      shinyjs::disable(\"event_relevance\")\n      shinyjs::disable(\"localSource\")\n    } else {\n      shinyjs::enable(\"similarity_gap_filter\")\n      shinyjs::disable(\"relevance\")\n      shinyjs::disable(\"event_relevance\")\n      shinyjs::enable(\"localSource\")\n    }\n  })\n  \n  output$filtering_criteria <- renderText({ \n    \n    \n    \n    updatingList <- NULL\n    if(input$russell_universe == \"R1000\"){\n      if(input$sort_profiles){\n        if(input$aggregate_criteria == \"GROUP\"){\n          updatingList <- best_profile_group_ordered_r1000_corrado_df$my_event\n        }\n        if(input$aggregate_criteria == \"CATEGORY\"){\n          updatingList <- best_profile_category_ordered_r1000_corrado_df$my_event\n        }\n      } else {\n        if(input$aggregate_criteria == \"GROUP\"){\n          updatingList <- all_group_events\n        }\n        if(input$aggregate_criteria == \"CATEGORY\"){\n          updatingList <- all_category_events\n        }\n      }\n    } else {\n      \n      if(input$sort_profiles){\n        if(input$aggregate_criteria == \"GROUP\"){\n          updatingList <- best_profile_group_ordered_r2000_corrado_df$my_event\n        }\n        if(input$aggregate_criteria == \"CATEGORY\"){\n          updatingList <- best_profile_category_ordered_r2000_corrado_df$my_event\n        }\n      } else {\n        if(input$aggregate_criteria == \"GROUP\"){\n          updatingList <- all_group_events\n        }\n        if(input$aggregate_criteria == \"CATEGORY\"){\n          updatingList <- all_category_events\n        }\n      }\n    } \n    \n    updateSelectInput(session, \"my_event\",\n                      label =\"EVENT\",\n                      choices = updatingList,\n                      selected = input$my_event\n    )\n    \n    data <- NULL\n    if (input$russell_universe == \"R1000\"){\n      data <- dataTotr1000\n    } else {\n      data <- dataTotr2000\n    }\n    \n    data <- data[data$event_number_event_filtering >= as.numeric(input$event_number_event_filtering),]\n    \n    if(input$sentiment_criteria != \"BEST\"){\n      data <- data[data$localSource == input$localSource,]\n      data <- data[data$similarity_gap_filter == input$similarity_gap_filter,]\n      data <- data[data$sentiment_criteria == input$sentiment_criteria,]\n      data <- data[data$relevance == input$relevance,]\n      data <- data[data$event_relevance == input$event_relevance,]\n      \n    }\n    \n    dataf <- data[data$my_event == input$my_event,]\n    \n    if (dim(dataf)[1]>0){\n      dataf <- dataf[order(dataf$infinity_return,decreasing = TRUE),]\n      rowProfile <- dataf[1,]\n      if(input$sentiment_criteria == \"BEST\"){\n        paste0(\"Source : \",rowProfile$localSource,\" ,Sector : \",rowProfile$gics_sector,\" ,Sentiment : \",rowProfile$sentiment_criteria,\" ,Similarity days : \",rowProfile$similarity_gap_filter,\n               \" ,Relevance : \",rowProfile$relevance, \" ,Event relevance : \",rowProfile$event_relevance)\n      } else {\n        \"your selection applies\"\n      }\n    }\n  })\n  \n  # Fill in the spot we created for a plot\n  output$eventMinutesPlotHigh <- renderPlot({\n    data <- NULL\n    if (input$russell_universe == \"R1000\"){\n      data <- dataTotr1000\n    } else {\n      data <- dataTotr2000\n    }\n    \n    data <- data[data$event_number_event_filtering >= as.numeric(input$event_number_event_filtering),]\n    if(input$sentiment_criteria != \"BEST\"){\n      data <- data[data$localSource == input$localSource,]\n      data <- data[data$similarity_gap_filter == input$similarity_gap_filter,]\n      data <- data[data$sentiment_criteria == input$sentiment_criteria,]\n      data <- data[data$relevance == input$relevance,]\n      data <- data[data$event_relevance == input$event_relevance,]\n    }\n    dataf <- data[data$my_event == input$my_event,]\n    \n    if (dim(dataf)[1] >0){\n      \n      \n      \n      \n      dataf <- dataf[order(dataf$infinity_return,decreasing = TRUE),]\n      \n      \n      \n      rowProfile <- dataf[1,]\n      \n      \n      \n      \n      \n      stats_sign <- colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))]\n      rets <- paste0(\"RET\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      ord_stats_sign <- paste0(\"ORD\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      vol_stats_sign <- paste0(\"VOLU\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      vola_stats_sign <- paste0(\"VOLA\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      \n      stats_sign <- rowProfile[,stats_sign]\n      rets <- rowProfile[,rets]\n      colnames(rets) <- colnames(stats_sign)\n      ord_stats_sign <- rowProfile[,ord_stats_sign]\n      colnames(ord_stats_sign) <- colnames(stats_sign)\n      vol_stats_sign <- rowProfile[,vol_stats_sign]\n      colnames(vol_stats_sign) <- colnames(stats_sign)\n      vola_stats_sign <- rowProfile[,vola_stats_sign]\n      colnames(vola_stats_sign) <- colnames(stats_sign)\n      \n      dataframe <- as.data.frame(t(rbind(stats_sign,ord_stats_sign,vol_stats_sign,vola_stats_sign,rets)))\n      colnames(dataframe) <- c(\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\",\"VOLUME\",\"VOLATILITY\",\"RETS\")\n      dataframe$MINUTES <- as.numeric(colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      dataframe <- dataframe[,c(\"MINUTES\",\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\",\"VOLUME\",\"VOLATILITY\",\"RETS\")]\n      \n      if (input$my_plot == \"RETURNS_SIGNIFICANCE\"){\n        g <- outputGraphicsTogetherBestProfileRets(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n        \n        # Render your graph\n        print(g)    \n        \n      } else {\n        g <- outputGraphicsTogetherBestProfileVola(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n        \n        # Render your graph\n        print(g)  \n      }\n      \n    } else {\n      \n      pp <- readPNG(\"SORRY.PNG\")\n      rasterImage(image = pp,xleft = 0,ybottom = 0,xright = 1,ytop = 1)\n      #       updateSelectInput(session, \"my_event\",\n      #                         label =\"EVENT\",\n      #                         choices = unique(as.character(data$my_event[order(data$infinity_return,decreasing = TRUE)])),\n      #                         selected = NULL\n      #       )\n    }\n  })\n  \n  \n  output$eventMinutesPlotLow <- renderPlot({\n    data <- NULL\n    if (input$russell_universe == \"R1000\"){\n      data <- dataTotr1000\n    } else {\n      data <- dataTotr2000\n    }\n    \n    data <- data[data$event_number_event_filtering >= as.numeric(input$event_number_event_filtering),]\n    if(input$sentiment_criteria != \"BEST\"){\n      data <- data[data$localSource == input$localSource,]\n      data <- data[data$similarity_gap_filter == input$similarity_gap_filter,]\n      data <- data[data$sentiment_criteria == input$sentiment_criteria,]\n      data <- data[data$relevance == input$relevance,]\n      data <- data[data$event_relevance == input$event_relevance,]\n    }\n    \n    \n    dataf <- data[data$my_event == input$my_event,]\n    \n    if (dim(dataf)[1] >0){\n      \n      \n      dataf <- dataf[order(dataf$infinity_return,decreasing = TRUE),]\n      \n      \n      \n      rowProfile <- dataf[1,]\n      \n      \n      \n      stats_sign <- colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))]\n      rets <- paste0(\"RET\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      ord_stats_sign <- paste0(\"ORD\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      vol_stats_sign <- paste0(\"VOLU\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      vola_stats_sign <- paste0(\"VOLA\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      \n      stats_sign <- rowProfile[,stats_sign]\n      rets <- rowProfile[,rets]\n      colnames(rets) <- colnames(stats_sign)\n      ord_stats_sign <- rowProfile[,ord_stats_sign]\n      colnames(ord_stats_sign) <- colnames(stats_sign)\n      vol_stats_sign <- rowProfile[,vol_stats_sign]\n      colnames(vol_stats_sign) <- colnames(stats_sign)\n      vola_stats_sign <- rowProfile[,vola_stats_sign]\n      colnames(vola_stats_sign) <- colnames(stats_sign)\n      \n      dataframe <- as.data.frame(t(rbind(stats_sign,ord_stats_sign,vol_stats_sign,vola_stats_sign,rets)))\n      colnames(dataframe) <- c(\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\",\"VOLUME\",\"VOLATILITY\",\"RETS\")\n      dataframe$MINUTES <- as.numeric(colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n      dataframe <- dataframe[,c(\"MINUTES\",\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\",\"VOLUME\",\"VOLATILITY\",\"RETS\")]\n      \n      if (input$my_plot == \"RETURNS_SIGNIFICANCE\"){\n        g <- outputGraphicsTogetherBestProfileStats(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n        # Render your graph\n        print(g)    \n      } else {\n        g <- outputGraphicsTogetherBestProfileVol(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n        # Render your graph\n        print(g)  \n      }\n    } else {\n      print(\"not enough data\")\n      #       updateSelectInput(session, \"my_event\",\n      #                         label =\"EVENT\",\n      #                         choices = unique(as.character(data$my_event[order(data$infinity_return,decreasing = TRUE)])),\n      #                         selected = NULL\n      #       )\n    }\n  })\n  \n}\n",
    "created" : 1475228320398.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3664968347",
    "id" : "7BB9AAE9",
    "lastKnownWriteTime" : 1475233721,
    "path" : "E:/research/Projects/sduprey/NAR-326/BIGDATAEQUITYEVENTPROFILE/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}