{
    "contents" : "library(\"RPToolsDB\")\nlibrary(shiny)\nlibrary(DT)\nlibrary(\"RPPlotUtils\")\nlibrary(dplyr)\n\nuser = 'sduprey'\n# JIRA Code (e.g. NAR-#)\nJIRACode = 'NAR-326'\nrepoPath = RP_GetSharedPath(user)\n# Input Data Path\ninputDataPath  = paste(repoPath,'InputData/', user,'/',JIRACode,'/',sep=\"\")\n# Output Data Path\noutputDataPath = paste(repoPath,'OutputData/', user,'/',JIRACode,'/',sep=\"\")\n\n\n\n# ####################\n# ####################\n# ####################\n# ####################\n# #################### Merging to get the two statistical tests\n# data <- readRDS(file=paste0(outputDataPath,\"src_r1000_corrado_df.rds\"))\n# stats_sign <- colnames(data)[which(!is.na(as.numeric(colnames(data))))]\n# rets <- paste0(\"RET\",colnames(data)[which(!is.na(as.numeric(colnames(data))))])\n# joining_columns <- setdiff(colnames(data), c(stats_sign,rets))\n# joining_columns_stats_test <- setdiff(joining_columns, \"corrado_methodo\")\n# dataDT <- as.data.table(data)\n# \n# stackStatsTest <- function(df){\n#   print(dim(df))\n# }\n# \n# corradoAbnDT <- dataDT[,stackStatsTest,by=joining_columns_stats_test]\n# \n# print(joining_columns)\n\n# ####################\n# ####################\n# ####################\n# ####################\n# #################### End of merging the two statist\n\n\n# ####################\n# ####################\n# ####################\n# ####################\n# #################### Merging to get the best\n# data2 <- readRDS(file=paste0(outputDataPath,\"r2000_corrado_df.rds\"))\n# # data1 <- readRDS(file=paste0(outputDataPath,\"r1000_corrado_df.rds\"))\n# data1 <- readRDS(file=paste0(outputDataPath,\"src_r1000_corrado_df.rds\"))\n# \n# data1$RET180[is.na(data1$RET180)] <- 0\n# data2$RET180[is.na(data2$RET180)] <- 0\n# \n# data1$RET180 <- rnorm(n=dim(data1)[1])\n# stats_sign <- colnames(data2)[which(!is.na(as.numeric(colnames(data2))))]\n# rets <- paste0(\"RET\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n# joining_columns <- setdiff(colnames(data2), c(stats_sign,rets))\n# \n# data <- merge(data1,data2, all.x = TRUE, by= joining_columns,suffixes=c('_r1000','_r2000'))\n# print(dim(data))\n# print(colnames(data))\n# \n# \n# selectTheBest <- function(row){\n#   to_keep <- NULL\n#   if (row[,\"sentiment_criteria\"] == \"POSITIVE\" | row[,\"sentiment_criteria\"] == \"ALL\" ){\n#     if( row[,\"RET180_r1000\"] >= row[,\"RET180_r2000\"] ){\n#       to_keep <- grepl('_r1000' ,colnames(row))\n#     } else {\n#       to_keep <- grepl('_r2000' ,colnames(row))\n#     }\n#   } else {\n#     if( row[,\"RET180_r1000\"] >= row[,\"RET180_r2000\"] ){\n#       to_keep <- grepl('_r2000' ,colnames(row))    \n#     } else {\n#       to_keep <- grepl('_r1000' ,colnames(row))\n#     }\n#   }\n#   toReturn <- row[,to_keep]\n#   colnames(toReturn) <- gsub(\"_r1000\",\"\",colnames(toReturn))\n#   colnames(toReturn) <- gsub(\"_r2000\",\"\",colnames(toReturn))\n#   return(toReturn)\n#  \n# }\n# \n# print(\"selecting best row by row\")\n# dataBest <- ddply(.data = data, .variables = joining_columns, .fun = selectTheBest)\n# print(\"end of selection\")\n# \n# print(dim(dataBest))\n\n############\n############\n############\n############ my functions\n\n\n\n##############\n##############\n##############\n############## Computing the spread sentiment category\nbootstrap_CI <- FALSE\ndata <- readRDS(file=paste0(outputDataPath,bootstrap_CI,\"r1000_bigdata_abvol_abvol_corrado_df.rds\"))\n\nstats_sign <- colnames(data)[which(!is.na(as.numeric(colnames(data))))]\nord <- paste0(\"ORD\",stats_sign)\nrets <- paste0(\"RET\",stats_sign)\nvol <- paste0(\"VOLU\",stats_sign)\nvola <- paste0(\"VOLA\",stats_sign)\nnumeric_columns <- c(stats_sign,rets,ord,vol,vola)\nmean_columns <- c(stats_sign,ord,vol,vola)\nspread_columns <- c(rets)\n\n\njoining_columns <- setdiff(colnames(data), numeric_columns)\n\njoining_columns <- setdiff(joining_columns, c(\"sentiment_criteria\",\"corrado_methodo\",\"event_number_event_filtering\"))\n\n\ncomputeSpread <- function(df,toMean , toSpread){\n  \n  if(sum(df$sentiment_criteria == \"NEGATIVE\") & sum(df$sentiment_criteria == \"POSITIVE\")){\n    \n    negativeSentiment <- df[df$sentiment_criteria == \"NEGATIVE\",]\n    positiveSentiment <- df[df$sentiment_criteria == \"POSITIVE\",]\n    \n    if(dim(negativeSentiment)[1] >1){\n      print(\"to investigate\")\n      negativeSentiment <- negativeSentiment[which.max(negativeSentiment$event_number_event_filtering),]\n    } \n    if(dim(positiveSentiment)[1] >1){\n      print(\"to investigate\")\n      positiveSentiment <- positiveSentiment[which.max(positiveSentiment$event_number_event_filtering),]\n    } \n    \n    rowToAdd <- negativeSentiment\n    rowToAdd[,toMean] <- (positiveSentiment[,toMean] + negativeSentiment[,toMean])/2\n    rowToAdd[,toSpread] <- (positiveSentiment[,toSpread] - negativeSentiment[,toSpread])\n    rowToAdd$sentiment_criteria <- \"SPREAD\"\n    return(rbind(df,rowToAdd))\n  }\n  return(df)\n}\n\ndata_spread_augmented <- ddply(.data = data, .variables = joining_columns, .fun = function(x){computeSpread(x,mean_columns,spread_columns)})\nprint(\"spread computed\")\nRP_SaveDataFrame(data_spread_augmented, outputDataPath = outputDataPath, filename = \"spr_r1000_bigdata_abvol_abvol_corrado_df\")\n\n\n# test <- data[data$my_event == \"analyst-ratings\" & data$similarity_gap_filter == 1 & data$localSource == \"DJ\",]\n# test[,joining_columns]\n# test <- data[data$my_event == \"analyst-rating\" & data$similarity_gap_filter == \"1\" & data$localSource == \"DJ\",]\n\n##############\n##############\n##############\n##############  End of computing the spread sentiment category\n\n\n##############\n##############\n##############\n############## Ordering the best profiles\n\ndata <- readRDS(file=paste0(outputDataPath,\"spr_r1000_bigdata_abvol_abvol_corrado_df.rds\"))\ndata <- data[data$event_number_event_filtering >= 50,]\n\n\n# data$infinity_return <- abs(data$RET180)\n# data$infinity_confidence <- data$`180`\n\ndata$correcting_factor <- 2*(data$sentiment_criteria == \"POSITIVE\"  | data$sentiment_criteria == \"SPREAD\")-1\ndata$correcting_factor[data$sentiment_criteria == \"ALL\"] <- 0\n#### first one\n# data$infinity_return <- (data$RET180)*data$correcting_factor\n#### second one\n# data$infinity_return <- (data$RET180)*(data$`180`)*data$correcting_factor\n#### third one\nstats_post_sign <- colnames(data)[which(as.numeric(colnames(data)) >= 0)]\nrets_post <- paste0(\"RET\",stats_post_sign)\ndata$infinity_return <- rowSums(data[,rets_post]*data$correcting_factor*data[,stats_post_sign],na.rm = TRUE)\n\n\n####### all generics\n\nall_group_events <- sort(unique(data$my_event[data$aggregate_criteria == \"GROUP\"]))\nall_category_events <- sort(unique(data$my_event[data$aggregate_criteria == \"CATEGORY\"]))\n\nRP_SaveDataFrame(all_group_events, outputDataPath = outputDataPath, filename = \"bigdata_all_group_events\")\nRP_SaveDataFrame(all_category_events, outputDataPath = outputDataPath, filename = \"bigdata_all_category_events\")\n\n\n###########\n########### Fro groups\ndataGroup <- data[data$aggregate_criteria ==\"GROUP\",]\n\ndataGroupDT <- as.data.table(dataGroup)\nselectBestProfile <- function(discriminating_value){\n\n  return(max(discriminating_value))\n}\nprint(dim(dataGroupDT))\n# setkey(dataDT,\"my_event\")\ndataGroupDT[,max_prof := selectBestProfile(infinity_return),by=c(\"my_event\")]\nprint(dim(dataGroupDT))\ndataGroupDT <- as.data.frame(unique(dataGroupDT[infinity_return >= max_prof,]))\nprint(dim(dataGroupDT))\ndataGroupDT <- unique(dataGroupDT[,c(\"my_event\",\"infinity_return\")])\ndataGroupDT <- dataGroupDT[order(dataGroupDT$infinity_return,decreasing = TRUE),]\nRP_SaveDataFrame(dataGroupDT, outputDataPath = outputDataPath, filename = \"bigdata_best_profile_group_ordered_r1000_corrado_df\")\n\n###########\n########### For categories\ndataCategory <- data[data$aggregate_criteria ==\"CATEGORY\",]\n\ndataCategoryDT <- as.data.table(dataCategory)\nselectBestProfile <- function(discriminating_value){\n  \n  return(max(discriminating_value))\n}\nprint(dim(dataCategoryDT))\n# setkey(dataDT,\"my_event\")\ndataCategoryDT[,max_prof := selectBestProfile(infinity_return),by=c(\"my_event\")]\nprint(dim(dataCategoryDT))\ndataCategoryDT <- as.data.frame(unique(dataCategoryDT[infinity_return >= max_prof,]))\nprint(dim(dataCategoryDT))\ndataCategoryDT <- unique(dataCategoryDT[,c(\"my_event\",\"infinity_return\")])\ndataCategoryDT <- dataCategoryDT[order(dataCategoryDT$infinity_return,decreasing = TRUE),]\nRP_SaveDataFrame(dataCategoryDT, outputDataPath = outputDataPath, filename = \"bigdata_best_profile_category_ordered_r1000_corrado_df\")\nprint(\"best profiles computed\")\n\n\n\n##############\n##############\n##############\n############## end of ordering the best profiles\n\n\n\n\nPlotDataFrame <- function (DataFrame, XLab = \"\", YLab = \"\", Title = \"\", AxisIncluded = FALSE, \n                           byRows = FALSE, spread = FALSE, pointOnly = FALSE, lineOnly = TRUE, percent=FALSE,\n                           FullExportingPath = NULL) \n{\n  if (byRows) \n    DataFrame = t(DataFrame)\n  if (is.null(colnames(DataFrame))) \n    colnames(DataFrame) <- paste0(\"COLUMN_\", seq(1, dim(DataFrame)[2]))\n  if (class(DataFrame) == \"matrix\") \n    DataFrame <- as.data.frame(DataFrame)\n  if (AxisIncluded) {\n    my_column_to_plot_against <- colnames(DataFrame)[1]\n  }\n  else {\n    my_column_to_plot_against <- \"TO_PLOT_AGAINST\"\n    DataFrame$TO_PLOT_AGAINST <- as.numeric(seq(1, dim(DataFrame)[1]))\n  }\n  ToPlotDataFrame <- melt(DataFrame, my_column_to_plot_against)\n  g <- ggplot(ToPlotDataFrame, aes(x = ToPlotDataFrame[, c(my_column_to_plot_against)], \n                                   y = value, group = variable, color = variable, fill = variable))\n  if (pointOnly) {\n    g <- g + geom_point()\n  }\n  else if (lineOnly) {\n    g <- g + geom_line()\n  }\n  else {\n    g <- g + geom_line() + geom_point()\n  }\n  g <- g + xlab(XLab) + ylab(YLab) + ggtitle(Title) + theme(title = element_text(size = 16, \n                                                                                 face = \"bold\")) + theme(axis.text.x = element_text(size = 14)) + \n    theme(legend.position = c(0.9, 0.9), legend.box = \"vertical\", \n          legend.text = element_text(size = 16)) + theme(legend.position = \"bottom\", \n                                                         legend.title = element_blank())+theme(axis.text=element_text(size=14),\n                                                                                               axis.title=element_text(size=16,face=\"bold\"))\n  if (spread) \n    g <- g + facet_wrap(~variable)\n  \n  if (percent){\n    g <- g +   scale_y_continuous(labels = percent_format(),limits = c(-0, 1)) \n  }\n  \n  if (\"DATE\" == my_column_to_plot_against) \n    g <- g + scale_x_date()\n  if (!is.null(FullExportingPath)) \n    RP_ExportPlot(g, FullExportingPath, \"\")\n  return(g)\n}\n\noutputGraphicsTogetherBestProfileStats <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n  dataframestats <- dataFrame[,c(\"MINUTES\",\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\")]\n  colnames(dataframestats) <- c(\"MINUTES\",\"SIGNIFICANCE(RANK)\",\"SIGNIFICANCE\")\n  dataframerets <- dataFrame[,c(\"MINUTES\",\"RETS\")]\n  colnames(dataframerets) <- c(\"MINUTES\",\"RETURNS\")\n  \n  \n  \n  significance_threshold <- 1 - 0.05\n  dataframestats$ABNORMAL_THRESHOLD <- significance_threshold\n  \n  dataframestats[is.na(dataframestats)] <- 0\n  \n  g1 <- PlotDataFrame(dataframestats,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"p-value\",percent= TRUE, Title = my_event, FullExportingPath = NULL)\n  # g2 <- RP_PlotDataFrame(dataframerets,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"BPS cumulated minute returns\",Title = my_event, FullExportingPath = NULL)\n  # g <- RP_ExportMultiplePlot(g1,g2, plotlist = NULL, filename = NULL, outputDataPath = NULL, cols = 1, width = 10, height = 15)\n  return(g1)\n}\n\noutputGraphicsTogetherBestProfileRets <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n\n  dataframerets <- dataFrame[,c(\"MINUTES\",\"RETS\")]\n  colnames(dataframerets) <- c(\"MINUTES\",\"RETURNS\")\n  \n  \n  # g1 <- RP_PlotDataFrame(dataframestats,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"p-value\",Title = my_event, FullExportingPath = NULL)\n  g2 <- PlotDataFrame(dataframerets,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"BPS cumulated minute returns\",Title = my_event, FullExportingPath = NULL)\n  # g <- RP_ExportMultiplePlot(g1,g2, plotlist = NULL, filename = NULL, outputDataPath = NULL, cols = 1, width = 10, height = 15)\n  \n  return(g2)\n  \n}\n\n\noutputGraphicsTogetherBestProfileVol <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n  \n  dataframerets <- dataFrame[,c(\"MINUTES\",\"VOLUME\")]\n  colnames(dataframerets) <- c(\"MINUTES\",\"VOLUME\")\n  \n  \n  # g1 <- RP_PlotDataFrame(dataframestats,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"p-value\",Title = my_event, FullExportingPath = NULL)\n  g2 <- PlotDataFrame(dataframerets,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"BPS cumulated minute returns\",Title = my_event, FullExportingPath = NULL)\n  # g <- RP_ExportMultiplePlot(g1,g2, plotlist = NULL, filename = NULL, outputDataPath = NULL, cols = 1, width = 10, height = 15)\n  \n  return(g2)\n  \n}\n\noutputGraphicsTogetherBestProfileVola <- function(product_criteria,aggregate_criteria,sentiment_criteria,similarity_gap_filter,ens_filter,event_number_event_filtering, gics_sector, my_event, localSource, dataFrame,  plotInArborescence, Russell_version = \"R1000\"){\n  \n  \n  dataframerets <- dataFrame[,c(\"MINUTES\",\"VOLATILITY\")]\n\n  \n  # g1 <- RP_PlotDataFrame(dataframestats,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"p-value\",Title = my_event, FullExportingPath = NULL)\n  g2 <- PlotDataFrame(dataframerets,AxisIncluded = T,XLab = \"Minute Lags\",YLab = \"BPS cumulated minute returns\",Title = my_event, FullExportingPath = NULL)\n  # g <- RP_ExportMultiplePlot(g1,g2, plotlist = NULL, filename = NULL, outputDataPath = NULL, cols = 1, width = 10, height = 15)\n  \n  return(g2)\n  \n}\n\n##############\n##############\n##############\n############## Testing stuff\n\n\n\n######## ranking the profile\n\n\n\n\n\n\n\n\n\n\n\n\nif(dim(data)[1]>0){\n  rowProfile <- data[1,]\n  \n  stats_sign <- colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))]\n  rets <- paste0(\"RET\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n  ord_stats_sign <- paste0(\"ORD\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n  vol_stats_sign <- paste0(\"VOLU\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n  vola_stats_sign <- paste0(\"VOLA\",colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n  \n  stats_sign <- rowProfile[,stats_sign]\n  rets <- rowProfile[,rets]\n  colnames(rets) <- colnames(stats_sign)\n  ord_stats_sign <- rowProfile[,ord_stats_sign]\n  colnames(ord_stats_sign) <- colnames(stats_sign)\n  vol_stats_sign <- rowProfile[,vol_stats_sign]\n  colnames(vol_stats_sign) <- colnames(stats_sign)\n  vola_stats_sign <- rowProfile[,vola_stats_sign]\n  colnames(vola_stats_sign) <- colnames(stats_sign)\n  \n  dataframe <- as.data.frame(t(rbind(stats_sign,ord_stats_sign,vol_stats_sign,vola_stats_sign,rets)))\n  colnames(dataframe) <- c(\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\",\"VOLUME\",\"VOLATILITY\",\"RETS\")\n  dataframe$MINUTES <- as.numeric(colnames(rowProfile)[which(!is.na(as.numeric(colnames(rowProfile))))])\n  dataframe <- dataframe[,c(\"MINUTES\",\"COR_STATS_SIGN\",\"ORD_STATS_SIGN\",\"VOLUME\",\"VOLATILITY\",\"RETS\")]\n  g1 <- outputGraphicsTogetherBestProfileStats(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n  \n  # Render your graph\n  print(g1)    \n  \n  g2 <- outputGraphicsTogetherBestProfileRets(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n  \n  # Render your graph\n  print(g2)   \n  \n  \n  g3 <- outputGraphicsTogetherBestProfileVol(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n  \n  # Render your graph\n  print(g3)   \n  \n  g4 <- outputGraphicsTogetherBestProfileVola(rowProfile$product_criteria,rowProfile$aggregate_criteria,rowProfile$sentiment_criteria,rowProfile$similarity_gap_filter,rowProfile$ens_filter,rowProfile$event_number_event_filtering, rowProfile$gics_sector, rowProfile$my_event, rowProfile$localSource, dataFrame = dataframe, FALSE, Russell_version = \"R1000\")\n  \n  # Render your graph\n  print(g4)   \n  \n}\n\n# #########################\n# #########################\n# ######################### Old stuff\n# \n# user = 'sduprey'\n# # JIRA Code (e.g. NAR-#)\n# JIRACode = 'NAR-285'\n# repoPath = RP_GetSharedPath(user)\n# # Input Data Path\n# inputDataPath  = paste(repoPath,'InputData/', user,'/',JIRACode,'/',sep=\"\")\n# # Output Data Path\n# outputDataPath = paste(repoPath,'OutputData/', user,'/',JIRACode,'/',sep=\"\")\n# outputDataPathFrameworkImage = paste(outputDataPath,'Image/',sep=\"\")\n# outputDataPathFrameworkFlatFiles = paste(outputDataPath,'FlatFilesToInvestigate/',sep=\"\")\n# \n# # load the dataset\n# # # train <- read.csv(paste0(outputDataPathFrameworkFlatFiles,\"recall_to_investigate.csv\"), header = TRUE, sep = \",\", quote = \"\\\"\", dec = \".\", fill = TRUE, comment.char = \"\", encoding = \"UTF-8\")\n# # data <- readRDS(paste0(outputDataPathFrameworkFlatFiles,\"recall_to_investigate.rds\"))\n# # data <- data[, c(\"TIMESTAMP_MIN\",\"VOLUME_MIN\",\"RP_ENTITY_ID\",\"ENTITY_NAME\",\"COUNTRY_CODE\",\"CURRENCY_PAIR\",\"MIN_MOVE_BPS\",\"ENTITY_WEIGHT\",\"HEADLINE\",\"RANKING_SCORE\",\"RP_STORY_ID\")]\n# # data <- data[grepl(\"USD\",data$CURRENCY_PAIR),]\n# # data$TIMESTAMP_MIN <- as.Date(data$TIMESTAMP_MIN)\n# # print(sum(!is.finite(data$TIMESTAMP_MIN)))\n# # train$MIN_MOVE_BPS <- train$MIN_MOVE_BPS*10000\n# \n# \n# # train <- read.csv(paste0(outputDataPathFrameworkFlatFiles,\"recall_to_investigate.csv\"), header = TRUE, sep = \",\", quote = \"\\\"\", dec = \".\", fill = TRUE, comment.char = \"\", encoding = \"UTF-8\")\n# data <- readRDS(paste0(outputDataPathFrameworkFlatFiles,\"reclassify_recall_to_investigate.rds\"))\n# data <- data[, c(\"TIMESTAMP_MIN\",\"VOLUME_MIN\",\"RP_ENTITY_ID\",\"ENTITY_NAME\",\"COUNTRY_CODE\",\"CURRENCY_PAIR\",\"MIN_MOVE_BPS\",\"ENTITY_WEIGHT\",\"HEADLINE\",\"RANKING_SCORE\",\"RP_STORY_ID\",\"GROUP\",\"TYPE\",\"CATEGORY\")]\n# data <- data[grepl(\"USD\",data$CURRENCY_PAIR),]\n# data$TIMESTAMP_MIN <- as.Date(data$TIMESTAMP_MIN)\n# print(sum(!is.finite(data$TIMESTAMP_MIN)))\n\n",
    "created" : 1475224696653.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3671471931",
    "id" : "599EFD3E",
    "lastKnownWriteTime" : 1475230301,
    "path" : "E:/research/Projects/sduprey/NAR-326/BIGDATAEQUITYEVENTPROFILE/reading_data.R",
    "project_path" : "reading_data.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}